!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}var installedModules={};__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.i=function(value){return value},__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=0)}([function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Expense = function () {\n    function Expense(id, desc, value) {\n        _classCallCheck(this, Expense);\n\n        this.id = id;\n        this.desc = desc;\n        this.value = value;\n        this.percentage = -1;\n    }\n\n    _createClass(Expense, [{\n        key: "calPercentage",\n        value: function calPercentage(totalIncome) {\n\n            //checking if total income is greater than 0, otherwise we cant have expense percentage\n            if (totalIncome > 0) {\n                this.percentage = Math.round(this.value / totalIncome * 100);\n            } else {\n                this.percentage = -1;\n            }\n        }\n    }, {\n        key: "getPercentage",\n        value: function getPercentage() {\n            return this.percentage;\n        }\n    }]);\n\n    return Expense;\n}();\n\nvar Income = function Income(id, desc, value) {\n    _classCallCheck(this, Income);\n\n    this.id = id, this.desc = desc, this.value = value;\n};\n\nvar BudgetController = function BudgetController() {\n    _classCallCheck(this, BudgetController);\n\n    var data = {\n        allitems: {\n            inc: [],\n            exp: []\n        },\n        totals: {\n            exp: 0,\n            inc: 0\n        },\n        budget: 0,\n        percentage: -1\n    };\n\n    var calculateTotal = function calculateTotal(type) {\n        var sum = 0;\n\n        data.allitems[type].forEach(function (cur) {\n            return sum += cur.value;\n        });\n\n        data.totals[type] = sum;\n    };\n\n    this.additem = function (type, desc, value) {\n        var newItem = void 0,\n            ID = void 0;\n\n        if (data.allitems[type].length > 0) {\n            //getting the id of the last item and adding 1 to get the new id\n            ID = data.allitems[type][data.allitems[type].length - 1].id + 1;\n        } else {\n            //if no item is present\n            ID = 0;\n        }\n\n        if (type === "exp") {\n            newItem = new Expense(ID, desc, value);\n        } else {\n            newItem = new Income(ID, desc, value);\n        }\n\n        data.allitems[type].push(newItem);\n        return newItem;\n    };\n\n    this.getData = function () {\n        return data.allitems.exp;\n    };\n\n    this.deleteItem = function (type, id) {\n\n        for (var i = 0; i < data.allitems[type].length; i++) {\n            if (data.allitems[type][i].id === id) {\n                data.allitems[type].splice(i, 1);\n                break;\n            }\n        }\n    };\n\n    this.calculatePercentage = function () {\n\n        data.allitems.exp.forEach(function (cur) {\n            return cur.calPercentage(data.totals.inc);\n        });\n    };\n\n    this.calculateBudget = function () {\n\n        calculateTotal("exp");\n        calculateTotal("inc");\n\n        data.budget = data.totals.inc - data.totals.exp;\n\n        if (data.budget > 0) {\n            data.percentage = Math.round(data.totals.exp / data.totals.inc * 100);\n        } else {\n            data.percentage = -1;\n        }\n    };\n\n    this.getPercentage = function () {\n\n        var allper = data.allitems.exp.map(function (cur) {\n            return cur.getPercentage();\n        });\n\n        return allper;\n    };\n\n    this.getBudget = function () {\n        return {\n            budget: data.budget,\n            percentage: data.percentage,\n            income: data.totals.inc,\n            expense: data.totals.exp\n        };\n    };\n};\n\n/*let bc = new BudgetController();\r\nbc.additem("exp","car",500);\r\nbc.additem("exp","car",100);\r\nbc.additem("inc","car",1000);\r\nbc.calculateBudget();\r\nbc.calculatePercentage();\r\nconsole.log(bc.getData());\r\nlet perc = bc.getPercentage();\r\nlet budget = bc.getBudget();\r\nconsole.log(perc);\r\nconsole.log(budget);*/\n\nvar UIController = function () {\n    function UIController() {\n        _classCallCheck(this, UIController);\n\n        var DOMStrings = {\n            type: "type__select",\n            desc: "description",\n            value: "value",\n            click: "add__value",\n            incomeList: "income__list",\n            expenseList: "expenses__list",\n            headBudget: "budget__value",\n            headIncome: "budget__income--value",\n            headExpense: "budget__expenses--value",\n            headPercentage: "budget__expenses--percentage",\n            container: "container",\n            percentage: ".item__percentage",\n            date: "budget__title--month"\n        };\n\n        this.getInput = function () {\n            // console.log("here");\n            return {\n                type: document.getElementById(DOMStrings.type).value,\n                desc: document.getElementById(DOMStrings.desc).value,\n                value: parseFloat(document.getElementById(DOMStrings.value).value)\n            };\n        };\n\n        this.addItemToUI = function (obj, type) {\n            var html, newhtml, root;\n\n            if (type === "exp") {\n                root = DOMStrings.expenseList;\n                html = \' <div class="item clearfix" id="exp-%id%"><div class="item__description">%desc%</div><div class="right clearfix"><div class="item__value">%value%</div><div class="item__percentage">21%</div><div class="item__delete"><button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div></div></div>\';\n            } else {\n                root = DOMStrings.incomeList;\n                html = \'<div class="item clearfix" id="inc-%id%"><div class="item__description">%desc%</div><div class="right clearfix"><div class="item__value">%value%</div><div class="item__delete"><button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div></div></div>\';\n            }\n\n            newhtml = html.replace("%id%", obj.id);\n            newhtml = newhtml.replace("%desc%", obj.desc);\n            newhtml = newhtml.replace("%value%", obj.value);\n\n            document.querySelector("." + root).insertAdjacentHTML("beforeend", newhtml);\n            document.getElementById(DOMStrings.desc).value = "";\n            document.getElementById(DOMStrings.value).value = "";\n        };\n\n        this.displaybudget = function (obj) {\n\n            if (obj.budget > 0) {\n\n                document.getElementById(DOMStrings.headBudget).innerHTML = "+ " + obj.budget;\n                document.getElementById(DOMStrings.headPercentage).innerHTML = obj.percentage + "%";\n            } else {\n                document.getElementById(DOMStrings.headBudget).innerHTML = obj.budget;\n                document.getElementById(DOMStrings.headPercentage).innerHTML = "---";\n            }\n\n            document.getElementById(DOMStrings.headExpense).innerHTML = obj.expense;\n            document.getElementById(DOMStrings.headIncome).innerHTML = obj.income;\n        };\n\n        this.updatepercentage = function (percentage) {\n            var fields = document.querySelectorAll(DOMStrings.percentage);\n\n            //creating a function to enale Foreach loop in lists\n            var listsForeach = function listsForeach(list, callback) {\n\n                for (var i = 0; i < list.length; i++) {\n                    callback(list[i], i);\n                }\n            };\n\n            //callback method for the foreach loop\n            listsForeach(fields, function (current, index) {\n                if (percentage[index] > 0) {\n                    current.textContent = percentage[index] + "%";\n                } else {\n                    current.textContent = "---";\n                }\n            });\n        };\n\n        this.deleteIemfromUI = function (selectorID) {\n            document.getElementById(selectorID).parentNode.removeChild(document.getElementById(selectorID));\n        };\n\n        this.getDOMStrings = function () {\n            return DOMStrings;\n        };\n    }\n\n    _createClass(UIController, null, [{\n        key: "displayDate",\n        value: function displayDate() {\n            var date = new Date();\n\n            var month = date.getMonth();\n            var year = date.getFullYear();\n            var months = [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'];\n\n            document.getElementById("budget__title--month").innerHTML = months[month] + \' \' + year;\n        }\n    }]);\n\n    return UIController;\n}();\n\nvar Controller = function Controller(budgetCtrl, UICtrl) {\n    _classCallCheck(this, Controller);\n\n    this.budgetCtrl = budgetCtrl;\n    this.UICtrl = UICtrl;\n\n    //setting up the event listeners\n    var setupeventlisteners = function () {\n        var DOMStrings = UICtrl.getDOMStrings();\n        var click = document.getElementById(DOMStrings.click);\n        click.addEventListener("click", function () {\n            return ctrlAddition();\n        });\n\n        document.addEventListener("keypress", function (event) {\n            if (event.keyCode === 13 || event.which === 13) {\n                ctrlAddition();\n            }\n        });\n\n        document.getElementById(DOMStrings.container).addEventListener("click", function () {\n            return ctrlDeletion(event);\n        });\n    }();\n\n    var ctrlAddition = function ctrlAddition() {\n        var input = void 0,\n            newItem = void 0;\n\n        //get he input values\n        input = UICtrl.getInput();\n\n        //add the values to the budget data \n        if (input.desc !== "" && !isNaN(input.value) && input.value !== "") {\n            newItem = budgetCtrl.additem(input.type, input.desc, input.value);\n\n            //all the item to the UI\n            UICtrl.addItemToUI(newItem, input.type);\n\n            //update the budget        \n            updateBudget();\n\n            //update the percentage of expenses    \n            updatePercentage();\n        }\n    };\n\n    var updateBudget = function updateBudget() {\n\n        //calculate the budget\n        budgetCtrl.calculateBudget();\n\n        //get the budget\n        var newBudget = budgetCtrl.getBudget();\n\n        //display the budget to the UI\n        UICtrl.displaybudget(newBudget);\n    };\n\n    var updatePercentage = function updatePercentage() {\n\n        //calculate the pecentage of expense\n        budgetCtrl.calculatePercentage();\n\n        //contains the percentage of each expenses\n        var per = budgetCtrl.getPercentage();\n\n        //displaying the percentage in the UI\n        UICtrl.updatepercentage(per);\n    };\n\n    var ctrlDeletion = function ctrlDeletion(event) {\n        var itemID = void 0,\n            type = void 0,\n            id = void 0,\n            newBudget = void 0;\n\n        //get the itemID of the parent node \n        itemID = event.target.parentNode.parentNode.parentNode.parentNode.id;\n\n        //spliting the id gies us the type (exp or inc) and the index of of the item in the //array\n        type = itemID.split("-")[0];\n        id = parseFloat(itemID.split("-")[1]);\n\n        //remove the data of the deleted item from the budget data\n        budgetCtrl.deleteItem(type, id);\n\n        //calculate the new budget\n        budgetCtrl.calculateBudget();\n        newBudget = budgetCtrl.getBudget();\n\n        //Updates the main budget area on the top\n        UICtrl.displaybudget(newBudget);\n\n        //deletes the selected income/expense from th UI\n        UICtrl.deleteIemfromUI(itemID);\n\n        //update the percentage of the expenses with the new data\n        updatePercentage();\n    };\n};\n\n(function () {\n\n    new Controller(new BudgetController(), new UIController());\n    UIController.displayDate();\n    // console.log("started");\n})();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAyLmpzP2U0YjAiXSwibmFtZXMiOlsiRXhwZW5zZSIsImlkIiwiZGVzYyIsInZhbHVlIiwicGVyY2VudGFnZSIsInRvdGFsSW5jb21lIiwiTWF0aCIsInJvdW5kIiwiSW5jb21lIiwiQnVkZ2V0Q29udHJvbGxlciIsImRhdGEiLCJhbGxpdGVtcyIsImluYyIsImV4cCIsInRvdGFscyIsImJ1ZGdldCIsImNhbGN1bGF0ZVRvdGFsIiwidHlwZSIsInN1bSIsImZvckVhY2giLCJjdXIiLCJhZGRpdGVtIiwibmV3SXRlbSIsIklEIiwibGVuZ3RoIiwicHVzaCIsImdldERhdGEiLCJkZWxldGVJdGVtIiwiaSIsInNwbGljZSIsImNhbGN1bGF0ZVBlcmNlbnRhZ2UiLCJjYWxQZXJjZW50YWdlIiwiY2FsY3VsYXRlQnVkZ2V0IiwiZ2V0UGVyY2VudGFnZSIsImFsbHBlciIsIm1hcCIsImdldEJ1ZGdldCIsImluY29tZSIsImV4cGVuc2UiLCJVSUNvbnRyb2xsZXIiLCJET01TdHJpbmdzIiwiY2xpY2siLCJpbmNvbWVMaXN0IiwiZXhwZW5zZUxpc3QiLCJoZWFkQnVkZ2V0IiwiaGVhZEluY29tZSIsImhlYWRFeHBlbnNlIiwiaGVhZFBlcmNlbnRhZ2UiLCJjb250YWluZXIiLCJkYXRlIiwiZ2V0SW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicGFyc2VGbG9hdCIsImFkZEl0ZW1Ub1VJIiwib2JqIiwiaHRtbCIsIm5ld2h0bWwiLCJyb290IiwicmVwbGFjZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJkaXNwbGF5YnVkZ2V0IiwiaW5uZXJIVE1MIiwidXBkYXRlcGVyY2VudGFnZSIsImZpZWxkcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsaXN0c0ZvcmVhY2giLCJsaXN0IiwiY2FsbGJhY2siLCJjdXJyZW50IiwiaW5kZXgiLCJ0ZXh0Q29udGVudCIsImRlbGV0ZUllbWZyb21VSSIsInNlbGVjdG9ySUQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJnZXRET01TdHJpbmdzIiwiRGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aHMiLCJDb250cm9sbGVyIiwiYnVkZ2V0Q3RybCIsIlVJQ3RybCIsInNldHVwZXZlbnRsaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiY3RybEFkZGl0aW9uIiwiZXZlbnQiLCJrZXlDb2RlIiwid2hpY2giLCJjdHJsRGVsZXRpb24iLCJpbnB1dCIsImlzTmFOIiwidXBkYXRlQnVkZ2V0IiwidXBkYXRlUGVyY2VudGFnZSIsIm5ld0J1ZGdldCIsInBlciIsIml0ZW1JRCIsInRhcmdldCIsInNwbGl0IiwiZGlzcGxheURhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUNNQSxPO0FBRUYscUJBQVlDLEVBQVosRUFBZUMsSUFBZixFQUFvQkMsS0FBcEIsRUFBMEI7QUFBQTs7QUFDdEIsYUFBS0YsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsYUFBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsYUFBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsYUFBS0MsVUFBTCxHQUFrQixDQUFDLENBQW5CO0FBQ0g7Ozs7c0NBR2NDLFcsRUFBYTs7QUFFeEI7QUFDQSxnQkFBR0EsY0FBYyxDQUFqQixFQUFtQjtBQUNmLHFCQUFLRCxVQUFMLEdBQWtCRSxLQUFLQyxLQUFMLENBQVksS0FBS0osS0FBTCxHQUFXRSxXQUFaLEdBQXlCLEdBQXBDLENBQWxCO0FBQ0gsYUFGRCxNQUVLO0FBQ0QscUJBQUtELFVBQUwsR0FBa0IsQ0FBQyxDQUFuQjtBQUNIO0FBRUo7Ozt3Q0FFZTtBQUNaLG1CQUFPLEtBQUtBLFVBQVo7QUFDSDs7Ozs7O0lBR0NJLE0sR0FFRixnQkFBWVAsRUFBWixFQUFlQyxJQUFmLEVBQW9CQyxLQUFwQixFQUEyQjtBQUFBOztBQUN2QixTQUFLRixFQUFMLEdBQVVBLEVBQVYsRUFDQSxLQUFLQyxJQUFMLEdBQVlBLElBRFosRUFFQSxLQUFL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QUFtQixTQUFuQkEsZ0JBQW1CLEdBQVc7O0FBRTlCO0FBQ0FaLG1CQUFXdkQsbUJBQVg7O0FBRUE7QUFDQSxZQUFJcUUsTUFBTWQsV0FBV3BELGFBQVgsRUFBVjs7QUFFQTtBQUNBcUQsZUFBT3RCLGdCQUFQLENBQXdCbUMsR0FBeEI7QUFFSCxLQVhEOztBQWFBLFFBQUlOLGVBQWUsU0FBZkEsWUFBZSxDQUFTSCxLQUFULEVBQWU7QUFDOUIsWUFBSVUsZUFBSjtBQUFBLFlBQVduRixhQUFYO0FBQUEsWUFBZ0JoQixXQUFoQjtBQUFBLFlBQW1CaUcsa0JBQW5COztBQUVBO0FBQ0FFLGlCQUFTVixNQUFNVyxNQUFOLENBQWExQixVQUFiLENBQXdCQSxVQUF4QixDQUFtQ0EsVUFBbkMsQ0FBOENBLFVBQTlDLENBQXlEMUUsRUFBbEU7O0FBRUE7QUFDQWdCLGVBQUttRixPQUFPRSxLQUFQLENBQWEsR0FBYixFQUFrQixDQUFsQixDQUFMO0FBQ0FyRyxhQUFHb0QsV0FBVytDLE9BQU9FLEtBQVAsQ0FBYSxHQUFiLEVBQWtCLENBQWxCLENBQVgsQ0FBSDs7QUFFQTtBQUNBakIsbUJBQVcxRCxVQUFYLENBQXNCVixJQUF0QixFQUEyQmhCLEVBQTNCOztBQUVBO0FBQ0FvRixtQkFBV3JELGVBQVg7QUFDQWtFLG9CQUFZYixXQUFXakQsU0FBWCxFQUFaOztBQUVBO0FBQ0FrRCxlQUFPeEIsYUFBUCxDQUFxQm9DLFNBQXJCOztBQUVBO0FBQ0FaLGVBQU9iLGVBQVAsQ0FBdUIyQixNQUF2Qjs7QUFFQTtBQUNBSDtBQUVILEtBMUJEO0FBNkJILEM7O0FBSUEsYUFBVTs7QUFFUCxRQUFJYixVQUFKLENBQWUsSUFBSTNFLGdCQUFKLEVBQWYsRUFBb0MsSUFBSThCLFlBQUosRUFBcEM7QUFDQUEsaUJBQWFnRSxXQUFiO0FBQ0Q7QUFDRixDQUxBLEdBQUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jbGFzcyBFeHBlbnNle1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihpZCxkZXNjLHZhbHVlKXtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5kZXNjID0gZGVzYztcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBjYWxQZXJjZW50YWdlICh0b3RhbEluY29tZSkge1xyXG4gICAgICBcclxuICAgICAgICAvL2NoZWNraW5nIGlmIHRvdGFsIGluY29tZSBpcyBncmVhdGVyIHRoYW4gMCwgb3RoZXJ3aXNlIHdlIGNhbnQgaGF2ZSBleHBlbnNlIHBlcmNlbnRhZ2VcclxuICAgICAgICBpZih0b3RhbEluY29tZSA+IDApe1xyXG4gICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKCh0aGlzLnZhbHVlL3RvdGFsSW5jb21lKSoxMDApO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBnZXRQZXJjZW50YWdlICgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBlcmNlbnRhZ2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEluY29tZXtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoaWQsZGVzYyx2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZCxcclxuICAgICAgICB0aGlzLmRlc2MgPSBkZXNjLFxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZSAgICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmNsYXNzIEJ1ZGdldENvbnRyb2xsZXJ7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICBcclxuICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgIGFsbGl0ZW1zIDoge1xyXG4gICAgICAgICAgaW5jIDogW10sXHJcbiAgICAgICAgICBleHAgOiBbXVxyXG4gICAgICB9LFxyXG4gICAgICB0b3RhbHMgOiB7XHJcbiAgICAgICAgICBleHAgOiAwLFxyXG4gICAgICAgICAgaW5jIDogMFxyXG4gICAgICB9LFxyXG4gICAgICBidWRnZXQgOiAwLCAgICBcclxuICAgICAgcGVyY2VudGFnZSA6IC0xICAgIFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgICAgIGxldCBjYWxjdWxhdGVUb3RhbCA9IGZ1bmN0aW9uKHR5cGUpe1xyXG4gICAgICAgIGxldCBzdW0gPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRhdGEuYWxsaXRlbXNbdHlwZV0uZm9yRWFjaChjdXIgPT4gc3VtKz1jdXIudmFsdWUpO1xyXG4gICAgICAgICBcclxuICAgICAgICBkYXRhLnRvdGFsc1t0eXBlXSA9IHN1bTtcclxuICAgICAgICBcclxuICAgIH07XHJcbiAgICBcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmFkZGl0ZW0gPWZ1bmN0aW9uKHR5cGUsZGVzYyx2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBuZXdJdGVtLElEO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZGF0YS5hbGxpdGVtc1t0eXBlXS5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIC8vZ2V0dGluZyB0aGUgaWQgb2YgdGhlIGxhc3QgaXRlbSBhbmQgYWRkaW5nIDEgdG8gZ2V0IHRoZSBuZXcgaWRcclxuICAgICAgICAgICAgICAgIElEID0gZGF0YS5hbGxpdGVtc1t0eXBlXVtkYXRhLmFsbGl0ZW1zW3R5cGVdLmxlbmd0aCAtMV0uaWQgKyAxO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIC8vaWYgbm8gaXRlbSBpcyBwcmVzZW50XHJcbiAgICAgICAgICAgICAgICBJRCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHR5cGUgPT09IFwiZXhwXCIpe1xyXG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ldyBFeHBlbnNlKElELGRlc2MsdmFsdWUpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXcgSW5jb21lKElELGRlc2MsdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkYXRhLmFsbGl0ZW1zW3R5cGVdLnB1c2gobmV3SXRlbSk7ICAgXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5nZXREYXRhID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuYWxsaXRlbXMuZXhwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kZWxldGVJdGVtID0gZnVuY3Rpb24odHlwZSxpZCl7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IGRhdGEuYWxsaXRlbXNbdHlwZV0ubGVuZ3RoIDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKCBkYXRhLmFsbGl0ZW1zW3R5cGVdW2ldLmlkID09PSBpZClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYWxsaXRlbXNbdHlwZV0uc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVBlcmNlbnRhZ2UgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZGF0YS5hbGxpdGVtcy5leHAuZm9yRWFjaCgoY3VyKSA9PiBjdXIuY2FsUGVyY2VudGFnZShkYXRhLnRvdGFscy5pbmMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUJ1ZGdldCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYWxjdWxhdGVUb3RhbChcImV4cFwiKTtcclxuICAgICAgICAgICAgY2FsY3VsYXRlVG90YWwoXCJpbmNcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkYXRhLmJ1ZGdldCA9IGRhdGEudG90YWxzLmluYyAtIGRhdGEudG90YWxzLmV4cDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGRhdGEuYnVkZ2V0ID4gMCl7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKChkYXRhLnRvdGFscy5leHAgLyBkYXRhLnRvdGFscy5pbmMpICogMTAwKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnBlcmNlbnRhZ2UgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdldFBlcmNlbnRhZ2UgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGFsbHBlciA9IGRhdGEuYWxsaXRlbXMuZXhwLm1hcCgoY3VyKSA9PiAgY3VyLmdldFBlcmNlbnRhZ2UoKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYWxscGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdldEJ1ZGdldCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBidWRnZXQgOiBkYXRhLmJ1ZGdldCxcclxuICAgICAgICAgICAgcGVyY2VudGFnZSA6IGRhdGEucGVyY2VudGFnZSxcclxuICAgICAgICAgICAgaW5jb21lIDogZGF0YS50b3RhbHMuaW5jLFxyXG4gICAgICAgICAgICBleHBlbnNlIDogZGF0YS50b3RhbHMuZXhwICBcclxuICAgICAgICAgIH07ICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgXHJcbn1cclxuXHJcbi8qbGV0IGJjID0gbmV3IEJ1ZGdldENvbnRyb2xsZXIoKTtcclxuYmMuYWRkaXRlbShcImV4cFwiLFwiY2FyXCIsNTAwKTtcclxuYmMuYWRkaXRlbShcImV4cFwiLFwiY2FyXCIsMTAwKTtcclxuYmMuYWRkaXRlbShcImluY1wiLFwiY2FyXCIsMTAwMCk7XHJcbmJjLmNhbGN1bGF0ZUJ1ZGdldCgpO1xyXG5iYy5jYWxjdWxhdGVQZXJjZW50YWdlKCk7XHJcbmNvbnNvbGUubG9nKGJjLmdldERhdGEoKSk7XHJcbmxldCBwZXJjID0gYmMuZ2V0UGVyY2VudGFnZSgpO1xyXG5sZXQgYnVkZ2V0ID0gYmMuZ2V0QnVkZ2V0KCk7XHJcbmNvbnNvbGUubG9nKHBlcmMpO1xyXG5jb25zb2xlLmxvZyhidWRnZXQpOyovXHJcblxyXG5jbGFzcyBVSUNvbnRyb2xsZXJ7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgXHJcbiAgICAgIGxldCBET01TdHJpbmdzID0ge1xyXG4gICAgICB0eXBlIDogXCJ0eXBlX19zZWxlY3RcIixcclxuICAgICAgZGVzYyA6IFwiZGVzY3JpcHRpb25cIixcclxuICAgICAgdmFsdWUgOiBcInZhbHVlXCIsXHJcbiAgICAgIGNsaWNrIDogXCJhZGRfX3ZhbHVlXCIsXHJcbiAgICAgIGluY29tZUxpc3QgOiBcImluY29tZV9fbGlzdFwiLFxyXG4gICAgICBleHBlbnNlTGlzdCA6IFwiZXhwZW5zZXNfX2xpc3RcIiwgICAgXHJcbiAgICAgIGhlYWRCdWRnZXQgOiBcImJ1ZGdldF9fdmFsdWVcIixcclxuICAgICAgaGVhZEluY29tZTogXCJidWRnZXRfX2luY29tZS0tdmFsdWVcIixcclxuICAgICAgaGVhZEV4cGVuc2U6IFwiYnVkZ2V0X19leHBlbnNlcy0tdmFsdWVcIixcclxuICAgICAgaGVhZFBlcmNlbnRhZ2U6IFwiYnVkZ2V0X19leHBlbnNlcy0tcGVyY2VudGFnZVwiLFxyXG4gICAgICBjb250YWluZXIgOiBcImNvbnRhaW5lclwiLFxyXG4gICAgICBwZXJjZW50YWdlIDogXCIuaXRlbV9fcGVyY2VudGFnZVwiLFxyXG4gICAgICBkYXRlIDogXCJidWRnZXRfX3RpdGxlLS1tb250aFwiICAgIFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdGhpcy5nZXRJbnB1dCA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgLy8gY29uc29sZS5sb2coXCJoZXJlXCIpO1xyXG4gICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgdHlwZSA6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTVN0cmluZ3MudHlwZSkudmFsdWUsXHJcbiAgICAgICAgIGRlc2MgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01TdHJpbmdzLmRlc2MpLnZhbHVlLCAgICBcclxuICAgICAgICAgdmFsdWUgOiBwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTVN0cmluZ3MudmFsdWUpLnZhbHVlIClcclxuICAgICAgIH1cclxuICAgIH07XHJcbiAgICAgICAgXHJcbiAgICB0aGlzLmFkZEl0ZW1Ub1VJID0gZnVuY3Rpb24ob2JqLHR5cGUpe1xyXG4gICAgICAgIHZhciBodG1sLG5ld2h0bWwscm9vdDtcclxuICAgICAgICBcclxuICAgICAgICBpZih0eXBlID09PSBcImV4cFwiKXtcclxuICAgICAgICAgICAgcm9vdCA9RE9NU3RyaW5ncy5leHBlbnNlTGlzdDtcclxuICAgICAgICAgICAgaHRtbCA9ICcgPGRpdiBjbGFzcz1cIml0ZW0gY2xlYXJmaXhcIiBpZD1cImV4cC0laWQlXCI+PGRpdiBjbGFzcz1cIml0ZW1fX2Rlc2NyaXB0aW9uXCI+JWRlc2MlPC9kaXY+PGRpdiBjbGFzcz1cInJpZ2h0IGNsZWFyZml4XCI+PGRpdiBjbGFzcz1cIml0ZW1fX3ZhbHVlXCI+JXZhbHVlJTwvZGl2PjxkaXYgY2xhc3M9XCJpdGVtX19wZXJjZW50YWdlXCI+MjElPC9kaXY+PGRpdiBjbGFzcz1cIml0ZW1fX2RlbGV0ZVwiPjxidXR0b24gY2xhc3M9XCJpdGVtX19kZWxldGUtLWJ0blwiPjxpIGNsYXNzPVwiaW9uLWlvcy1jbG9zZS1vdXRsaW5lXCI+PC9pPjwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJvb3QgPURPTVN0cmluZ3MuaW5jb21lTGlzdDtcclxuICAgICAgICAgICAgaHRtbCA9ICc8ZGl2IGNsYXNzPVwiaXRlbSBjbGVhcmZpeFwiIGlkPVwiaW5jLSVpZCVcIj48ZGl2IGNsYXNzPVwiaXRlbV9fZGVzY3JpcHRpb25cIj4lZGVzYyU8L2Rpdj48ZGl2IGNsYXNzPVwicmlnaHQgY2xlYXJmaXhcIj48ZGl2IGNsYXNzPVwiaXRlbV9fdmFsdWVcIj4ldmFsdWUlPC9kaXY+PGRpdiBjbGFzcz1cIml0ZW1fX2RlbGV0ZVwiPjxidXR0b24gY2xhc3M9XCJpdGVtX19kZWxldGUtLWJ0blwiPjxpIGNsYXNzPVwiaW9uLWlvcy1jbG9zZS1vdXRsaW5lXCI+PC9pPjwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIG5ld2h0bWwgPSBodG1sLnJlcGxhY2UoXCIlaWQlXCIsb2JqLmlkKTtcclxuICAgICAgICBuZXdodG1sID0gbmV3aHRtbC5yZXBsYWNlKFwiJWRlc2MlXCIsb2JqLmRlc2MpO1xyXG4gICAgICAgIG5ld2h0bWwgPSBuZXdodG1sLnJlcGxhY2UoXCIldmFsdWUlXCIsb2JqLnZhbHVlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIityb290KS5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIixuZXdodG1sKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01TdHJpbmdzLmRlc2MpLnZhbHVlPVwiXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NU3RyaW5ncy52YWx1ZSkudmFsdWU9XCJcIjtcclxuICAgICAgICAgICAgXHJcbiAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgdGhpcy5kaXNwbGF5YnVkZ2V0ID0gZnVuY3Rpb24ob2JqKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG9iai5idWRnZXQgPiAwKXtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NU3RyaW5ncy5oZWFkQnVkZ2V0KS5pbm5lckhUTUwgPSBcIisgXCIrb2JqLmJ1ZGdldDtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTVN0cmluZ3MuaGVhZFBlcmNlbnRhZ2UpLmlubmVySFRNTCA9IG9iai5wZXJjZW50YWdlICsgXCIlXCI7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NU3RyaW5ncy5oZWFkQnVkZ2V0KS5pbm5lckhUTUwgPSBvYmouYnVkZ2V0O1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NU3RyaW5ncy5oZWFkUGVyY2VudGFnZSkuaW5uZXJIVE1MID0gXCItLS1cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRE9NU3RyaW5ncy5oZWFkRXhwZW5zZSkuaW5uZXJIVE1MID0gb2JqLmV4cGVuc2U7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTVN0cmluZ3MuaGVhZEluY29tZSkuaW5uZXJIVE1MID0gb2JqLmluY29tZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgXHJcbiAgICB0aGlzLnVwZGF0ZXBlcmNlbnRhZ2UgPSBmdW5jdGlvbihwZXJjZW50YWdlKXtcclxuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRE9NU3RyaW5ncy5wZXJjZW50YWdlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vY3JlYXRpbmcgYSBmdW5jdGlvbiB0byBlbmFsZSBGb3JlYWNoIGxvb3AgaW4gbGlzdHNcclxuICAgICAgICAgICAgbGV0IGxpc3RzRm9yZWFjaCA9IGZ1bmN0aW9uKGxpc3QsY2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoIDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhsaXN0W2ldLGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9jYWxsYmFjayBtZXRob2QgZm9yIHRoZSBmb3JlYWNoIGxvb3BcclxuICAgICAgICAgICAgbGlzdHNGb3JlYWNoKGZpZWxkcyxmdW5jdGlvbihjdXJyZW50LGluZGV4KXtcclxuICAgICAgICAgICAgICAgIGlmKHBlcmNlbnRhZ2VbaW5kZXhdID4gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC50ZXh0Q29udGVudCA9IHBlcmNlbnRhZ2VbaW5kZXhdICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC50ZXh0Q29udGVudCA9IFwiLS0tXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuZGVsZXRlSWVtZnJvbVVJID0gZnVuY3Rpb24gKHNlbGVjdG9ySUQpe1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3RvcklEKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9ySUQpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgdGhpcy5nZXRET01TdHJpbmdzID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICByZXR1cm4gRE9NU3RyaW5ncztcclxuICAgICAgICAgfSAgICBcclxufVxyXG4gICAgXHJcbiAgc3RhdGljIGRpc3BsYXlEYXRlKCl7XHJcbiAgICAgICAgICAgIGxldCAgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICBsZXQgbW9udGhzID0gWydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWRnZXRfX3RpdGxlLS1tb250aFwiKS5pbm5lckhUTUwgPSBtb250aHNbbW9udGhdICsgJyAnICt5ZWFyXHJcbiAgfSAgXHJcblxyXG59XHJcblxyXG5jbGFzcyBDb250cm9sbGVyIHtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoYnVkZ2V0Q3RybCxVSUN0cmwpe1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYnVkZ2V0Q3RybCA9IGJ1ZGdldEN0cmw7XHJcbiAgICAgICAgdGhpcy5VSUN0cmwgPSBVSUN0cmw7XHJcblxyXG4gICAgICAgIC8vc2V0dGluZyB1cCB0aGUgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgbGV0IHNldHVwZXZlbnRsaXN0ZW5lcnMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBsZXQgRE9NU3RyaW5ncyA9IFVJQ3RybC5nZXRET01TdHJpbmdzKCk7XHJcbiAgICAgICAgICAgIGxldCBjbGljayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKERPTVN0cmluZ3MuY2xpY2spO1xyXG4gICAgICAgICAgICBjbGljay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKSA9PiBjdHJsQWRkaXRpb24oKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIixldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiggZXZlbnQua2V5Q29kZSA9PT0gMTMgfHwgZXZlbnQud2hpY2ggPT09IDEzKXtcclxuICAgICAgICAgICAgICAgICAgICBjdHJsQWRkaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9KTsgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChET01TdHJpbmdzLmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCkgPT4gY3RybERlbGV0aW9uKGV2ZW50KSk7IFxyXG4gICAgfSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBjdHJsQWRkaXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGlucHV0LG5ld0l0ZW07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9nZXQgaGUgaW5wdXQgdmFsdWVzXHJcbiAgICAgICAgaW5wdXQgPSBVSUN0cmwuZ2V0SW5wdXQoKTtcclxuICAgICAgXHJcbiAgICAgICAgLy9hZGQgdGhlIHZhbHVlcyB0byB0aGUgYnVkZ2V0IGRhdGEgXHJcbiAgICAgICAgaWYoaW5wdXQuZGVzYyAhPT0gXCJcIiAmJiAhaXNOYU4oaW5wdXQudmFsdWUpICYmIGlucHV0LnZhbHVlICE9PVwiXCIpe1xyXG4gICAgICAgIG5ld0l0ZW0gPSBidWRnZXRDdHJsLmFkZGl0ZW0oaW5wdXQudHlwZSxpbnB1dC5kZXNjLGlucHV0LnZhbHVlKTtcclxuICAgICAgICBcclxuICAgICAgICAvL2FsbCB0aGUgaXRlbSB0byB0aGUgVUlcclxuICAgICAgICBVSUN0cmwuYWRkSXRlbVRvVUkobmV3SXRlbSxpbnB1dC50eXBlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy91cGRhdGUgdGhlIGJ1ZGdldCAgICAgICAgXHJcbiAgICAgICAgdXBkYXRlQnVkZ2V0KCk7ICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAvL3VwZGF0ZSB0aGUgcGVyY2VudGFnZSBvZiBleHBlbnNlcyAgICBcclxuICAgICAgICB1cGRhdGVQZXJjZW50YWdlKCk7ICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfTtcclxuICAgICAgICBcclxuICAgIHZhciB1cGRhdGVCdWRnZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBcclxuICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgYnVkZ2V0XHJcbiAgICAgICAgYnVkZ2V0Q3RybC5jYWxjdWxhdGVCdWRnZXQoKTtcclxuICAgICAgICBcclxuICAgICAgICAvL2dldCB0aGUgYnVkZ2V0XHJcbiAgICAgICAgbGV0IG5ld0J1ZGdldCA9IGJ1ZGdldEN0cmwuZ2V0QnVkZ2V0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9kaXNwbGF5IHRoZSBidWRnZXQgdG8gdGhlIFVJXHJcbiAgICAgICAgVUlDdHJsLmRpc3BsYXlidWRnZXQobmV3QnVkZ2V0KTtcclxuICAgIH07IFxyXG4gICAgICAgIFxyXG4gICAgdmFyIHVwZGF0ZVBlcmNlbnRhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBcclxuICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgcGVjZW50YWdlIG9mIGV4cGVuc2VcclxuICAgICAgICBidWRnZXRDdHJsLmNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcclxuICAgICAgICBcclxuICAgICAgICAvL2NvbnRhaW5zIHRoZSBwZXJjZW50YWdlIG9mIGVhY2ggZXhwZW5zZXNcclxuICAgICAgICB2YXIgcGVyID0gYnVkZ2V0Q3RybC5nZXRQZXJjZW50YWdlKCk7XHJcbiAgICAgICBcclxuICAgICAgICAvL2Rpc3BsYXlpbmcgdGhlIHBlcmNlbnRhZ2UgaW4gdGhlIFVJXHJcbiAgICAgICAgVUlDdHJsLnVwZGF0ZXBlcmNlbnRhZ2UocGVyKTtcclxuICAgICAgICBcclxuICAgIH0gXHJcbiAgICBcclxuICAgIHZhciBjdHJsRGVsZXRpb24gPSBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgbGV0IGl0ZW1JRCx0eXBlLGlkLG5ld0J1ZGdldDtcclxuICAgICAgICBcclxuICAgICAgICAvL2dldCB0aGUgaXRlbUlEIG9mIHRoZSBwYXJlbnQgbm9kZSBcclxuICAgICAgICBpdGVtSUQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5pZDtcclxuICAgIFxyXG4gICAgICAgIC8vc3BsaXRpbmcgdGhlIGlkIGdpZXMgdXMgdGhlIHR5cGUgKGV4cCBvciBpbmMpIGFuZCB0aGUgaW5kZXggb2Ygb2YgdGhlIGl0ZW0gaW4gdGhlIC8vYXJyYXlcclxuICAgICAgICB0eXBlPWl0ZW1JRC5zcGxpdChcIi1cIilbMF07XHJcbiAgICAgICAgaWQ9cGFyc2VGbG9hdChpdGVtSUQuc3BsaXQoXCItXCIpWzFdKTtcclxuICAgICAgICBcclxuICAgICAgICAvL3JlbW92ZSB0aGUgZGF0YSBvZiB0aGUgZGVsZXRlZCBpdGVtIGZyb20gdGhlIGJ1ZGdldCBkYXRhXHJcbiAgICAgICAgYnVkZ2V0Q3RybC5kZWxldGVJdGVtKHR5cGUsaWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vY2FsY3VsYXRlIHRoZSBuZXcgYnVkZ2V0XHJcbiAgICAgICAgYnVkZ2V0Q3RybC5jYWxjdWxhdGVCdWRnZXQoKTtcclxuICAgICAgICBuZXdCdWRnZXQgPSBidWRnZXRDdHJsLmdldEJ1ZGdldCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vVXBkYXRlcyB0aGUgbWFpbiBidWRnZXQgYXJlYSBvbiB0aGUgdG9wXHJcbiAgICAgICAgVUlDdHJsLmRpc3BsYXlidWRnZXQobmV3QnVkZ2V0KTtcclxuICAgICAgICBcclxuICAgICAgICAvL2RlbGV0ZXMgdGhlIHNlbGVjdGVkIGluY29tZS9leHBlbnNlIGZyb20gdGggVUlcclxuICAgICAgICBVSUN0cmwuZGVsZXRlSWVtZnJvbVVJKGl0ZW1JRCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy91cGRhdGUgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGV4cGVuc2VzIHdpdGggdGhlIG5ldyBkYXRhXHJcbiAgICAgICAgdXBkYXRlUGVyY2VudGFnZSgpO1xyXG4gICAgICAgIFxyXG4gICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgXHJcbn1cclxuICAgIFxyXG5cclxufVxyXG4oZnVuY3Rpb24oKXtcclxuICAgIFxyXG4gICAgbmV3IENvbnRyb2xsZXIobmV3IEJ1ZGdldENvbnRyb2xsZXIsbmV3IFVJQ29udHJvbGxlcik7XHJcbiAgICBVSUNvbnRyb2xsZXIuZGlzcGxheURhdGUoKTtcclxuICAgLy8gY29uc29sZS5sb2coXCJzdGFydGVkXCIpO1xyXG59KCkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcDIuanMiXSwic291cmNlUm9vdCI6IiJ9')}]);